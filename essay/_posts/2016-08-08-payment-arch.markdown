---
layout: post
title: "支付系统架构"
subtitle: "支付系统设计-11"
date: 2016-08-08 12:00:00
author: "shamphone"
header-img: "img/home-bg-post.jpg"
catalog: true
tags: [Fintech]

---

> 修改记录：  
> 2016-08-08 初稿，列举了现有主流公司的支付架构；  
> 2017-03-04 补充支付系统架构的overview.

整体上来说，我们可以把一个公司的支付系统发展分为三个阶段：  
1. 支付系统：支付作为一个（封闭）的、独立的应用系统，为各系统提供支付功能支持。一般来说，这个系统仅限于为公司内部的业务提供支付支持，并且和业务紧密耦合。  
2. 支付服务：支付作为一个开放的系统，为公司内外部系统、各种业务提供支付服务。支付服务本身应该是和具体的业务解耦合的。   
3. 支付平台：支付作为一个可扩展的平台， 公司内外部的用户可以在此基础上定制开发自己的服务。  
简单说，支付系统是仅供内部使用的， 支付服务是支持公司内外部来调用的，支付平台是可以在服务的基础上定制各种场景支持的。 在实施上，一般也是按照这个顺序来逐步构建和完善。只有把支付系统做好了，才能在此基础上，开发支付服务；先用支付服务把公司内部的业务服务好，充分了解支付业务功能，才有基础建设好支付平台。

## 支付流程

我们以收银台为例，详细说明支付的正确打开方式。 当用户提交订单后，就会被引导到收银台上。
以某东为例，手机上是这样的：  
[![京东PC收银台](http://blog.lixf.cn/img/in-post/cashier-phone-jd.png)](http://blog.lixf.cn/img/in-post/cashier-phone-jd.png)

PC上是这样的：  
[![京东收银台](http://blog.lixf.cn/img/in-post/cashier-jd.png)](http://blog.lixf.cn/img/in-post/cashier-jd.png)

从这里我们可以看出，用户进入收银台之后，首先需要选择默认的**支付方式**。 

> 支付方式指消费时付款的方式，比如现金支付、货到付款、信用卡支付、借记卡支付、扫码支付等。

那么有哪些支付方式适合在收银台上展示出来？ 也就是支付应用和支付方式的关系。在这里，收银台是一类**支付应用**。 

> 支付应用指提供给最终用户在特定场景下使用的产品，比如扫码收银、二维码支付、打赏、众筹、POS支付、生活缴费、信用卡返款、手机充值等。 这些应用是建立在支付产品的基础之上，直接面向最终的用户提供服务。 

每个支付应用可以用的支付方式是不一样的。比如说，扫码收银，可能仅支持微信和支付宝。POS支付，仅支持银行卡。而信用卡返款，只能从其他的借记卡上去扣款。 支付应用的设计和公司的业务有关，并需要考虑在公司业务场景下的用户支付体验。目前应用最全的数支付宝，可以参观下支付宝的应用（截止至2017年2月15日）：  
[![支付宝](http://blog.lixf.cn/img/in-post/arch-product.png)](http://blog.lixf.cn/img/in-post/arch-product.png)

在收银台这个应用中，在呈现支付方式时，哪些支付方式可以提供给当前场景下的用户来使用，哪个方式应该排在前面，这在支付系统中，是通过**引导路由**来实现的。 

> 引导路由是根据支付应用、收款商户、订单额度等信息来决定提供给用户的支付方式列表。 

当用户选择一种支付方式并提交支付后，支付系统开始执行扣款。比如用户选择通过招行来支付，系统就会请求招行来扣款吗？ 这不一定，因为系统有可能并没有接入到招行接口。除了招行自己的接口外，第三方支付公司、银联等，也可以从招行卡上扣款。那应该使用哪个通道合适？ 这是通过**支付路由**来决定的。 

> 支付路由指根据用户选择的支付方式，结合费率、QOS等因素，选择合适的银行或者其他公司提供的支付接口来完成资金转移操作。 

通过支付路由，我们可以定位到一个落地来执行的**支付接口**。 

> 支付接口，指由银行提供的用来执行支付的接口。这里要注意，对于同一家银行，除了总行可以提供一个接口，各地的分行也可以提供这个接口。 但一般来说，同一家银行的接口规范是一样的，不同的是提供接口的服务器、费率、性能等。

比如，支付公司可以接入工行总行、工行上海分行、工行北京分行的接口。为什么要接入分行呢？ 一般来说，不少分行会提供更优惠的接入费率，以及经常会举办一些活动来吸引用户接入。 

> 支付通道，这是对支付接口的一个封装，包含合作银行以及通道成本、商户费率、QOS等信息； 

银行和第三方支付等渠道提供给电商公司使用的接口，往往都会封装成**支付产品**。 

> 支付产品指将支付通道打包成满足某特定支付场景需求的商品，比如信用卡快捷、信用卡Moto等。 

[![支付产品](http://blog.lixf.cn/img/in-post/arch-pay-product.jpg)](http://blog.lixf.cn/img/in-post/arch-pay-product.jpg)

在这里我们把涉及到的几个概念都做了定义。 当然，这些定义仅仅是从约定俗成的角度来描述，不具有学术意义。 不同的公司，对这些名称叫法还不完全一致。 比如支付通道，有些叫渠道，有些公司叫网关。这里统一一下称呼，避免混淆。 总的来说，支付系统是把支付通道提供的“支付产品” 使用支付路由来封装成业务需要的“支付产品”。这就是支付的核心流程。支付路由在其中起着关键作用。
## 参与者

区分两个概念:支付和交易。支付是交易的一部分。一个简单的交易过程包括:客户下订单，客户完成支付，商家接收订单，商家出货。这里仅考虑下订单的流程。从软件工程的角度， 我们首先需要明确下几个参与者。

- 电商系统，指提供在线购物服务的系统。用户在这个系统中完成交易。

- 支付系统，可以是电商系统的一个模块，或者是个独立的系统。这是本文的主角，用来完成支付过程。

- 用户，在电商系统中败家的那位。如果使用银行卡做交易，那也被称为持卡人。

- 支付渠道，指用来实际完成资金转移的单位，如微信、支付宝、银行、银联等。

- 商家，就是在电商系统中卖东西或者提供服务的机构。 

## 支付流程

我们以电商系统的订单支付为例，看看支付系统中需要提供的基本功能。 

1. 用户提交订单到电商系统，电商系统对订单进行检验，无问题则调起支付接口执行支付。注意这里支付接口是在服务器端调起的。一般支付接口很少从客户端直接调起。为了安全，支付接口一般要求用HTTPS来访问，并对接口做签名。关于支付接口的设计，我将另起博文介绍。  
2.支付系统检查参数有效性，特别是签名的有效性。  
3.根据用户选择的支付方式，以及系统支付路由设置，选择合适的收单机构。这里涉及三个概念，支付方式，支付路由。这又是一个槽点。简单说，用户可以选择各种银行卡支付，比如宁波银行卡，但是你的支付系统没有对接宁波银行，那对这种卡，可以选择你接入的，支持这个卡的收单机构来执行支付，如用微信或者支付宝等等第三方支付，或者银联支付等系统支持的方式来执行。这就是支付路由，根据用户提供的银行卡来选择合适的收单机构去执行支付。常用支付方式还包括第三方支付，如微信支付宝等，这种情况下就不需要支付路由了。  
4.调用收单接口执行支付。这是支付系统的核心。每个公司的收单接口都不一样，接入一两个收单机构还好，接入的多了，如何统一这些接口，就是一个设计难点。  
5.支付成功，收单机构把钱打到商户的账户上了。 商家就准备发货了。 怎么发货，不是本文的重点。 这里关注的要点是， 商家能收到多少钱？ 比如100块钱的商品，用户支付了100块钱（运费、打折等另算），这100块钱，还要刨去电商系统的佣金、支付通道的手续费，才能最终落到商家手里。

这是个Happy流程，一切看起来都很美好，但实际上步步都是坑，一旦有地方考虑不周全，轻者掉单频发，重者接口被盗刷，损失惨重。  

- 如何避免攻击者修改支付接口参数， 比如100块钱的东西，改成10块钱？  
- 调用收单接口来执行最终实际支付时，如果支付失败了，比如卡上没钱了，怎么办？  
- 收单接口把账户上的钱扣走了，但是通知支付系统的时候出错了（比如网络闪断，或者支付系统重启了），支付系统不知道这笔交易已经达成了，怎么处理？  
- 还有好多问题....

和钱打交道，在任何公司，都跑不掉财务部门。 那财务部门会关注哪些内容？ 当然，最重要的是账务信息。 所有的交易都要记账，按要求公司都需要定期做审计，每一笔帐都不能出错。这当然不能等到审计的时候再去核对，而是每天都需要对账，确保所有的交易支出相抵，也就是所说的把账给平了。 这就有三种情况： 电商系统和商家对账；电商系统和支付系统对账；支付系统和收单机构对账。在支付系统中，我们仅关注后两者的情况。

## 支付场景



从软件开发角度， 还有一些非功能性需求需要实现：
- 性能： 特别是秒杀的时候，如何满足高频率的支付需求？  
- 可靠性：不用说，系统能达到几个9，是衡量软件设计功力的重要指标。 99%是基础， 99.999%是目标，更多的9哪就是神了。  
- 易用性：支付中多一个步骤，就会流失至少2%的用户。 产品经理都在削尖脑袋想想怎么让用户赶紧掏钱。  
- 可扩展性： 近年来支付业务创新产品多，一元购、红包、打赏等，还有各种的支付场景。 怎么能够快速满足产品经理的需求，尽快上线来抢占市场，可扩展性对支付系统设计也是一个挑战。  
- 可伸缩性：为了支持公司业务，搞一些促销活动是必须的。 那促销带来的爆发流量，最佳应对方法就是加机器了。 平时流量低，用不了那么多机器，该释放的就释放掉了， 给公司省点钱。

## 支付的典型架构
所以支付的坑还不少，我们先看看互联网的头牌们是如何设计支付系统的？

**支持团购业务的支付系统**
[![某团支付系统产品架构](http://blog.lixf.cn/img/in-post/arch_meituan.png)](http://blog.lixf.cn/img/in-post/arch_meituan.png)

**支持旅游业务的支付系统**
[![Q旅游公司产品架构](http://blog.lixf.cn/img/in-post/arch_qunar.png)](http://blog.lixf.cn/img/in-post/arch_qunar.png)

**大型电商公司的支付系统架构**
[![某东金融产品架构](http://blog.lixf.cn/img/in-post/arch_jd.png)](http://blog.lixf.cn/img/in-post/arch_jd.png)

**支付宝公开的系统架构**
[![某金服产品架构](http://blog.lixf.cn/img/in-post/arch_alipay.png)](http://blog.lixf.cn/img/in-post/arch_alipay.png)


## 参考架构

一般来说，支付系统典型架构会包含如下模块：
[![模块设计](http://blog.lixf.cn/img/in-post/arch-modules.jpg)](http://blog.lixf.cn/img/in-post/arch-modules.jpg)


整体上来说， 从分层的角度，支付系统和普通的业务系统并没有本质的区别，也是应用、服务、接口、引擎、存储等分层。
在应用层，支付系统一般会提供如下子系统：

1. 支付应用和产品(应用层)： 这是针对各端（PC Web端、android、IOS)的应用和产品。 为各个业务系统提供收银台支持，同时支付作为一个独立的模块，可以提供诸如银行卡管理、理财、零钱、虚拟币管理、交易记录查阅、卡券等功能；

2. 支付运营系统(应用层)： 支付系统从安全的角度来说，有一个重要的要求是，懂代码的不碰线上，管运营的不碰代码。这对运营系统的要求就很高，要求基本上所有线上的问题，都可以通过运营系统来解决。

3. 支付BI系统(应用层): 支付中产生大量的数据，对这些数据进行分析， 有助于公司老板们了解运营状况，进行决策支持。

4. 风控系统(应用层)：这是合规要求的风险控制、反洗钱合规等。

5. 信用信息管理系统(应用层)：用来支持对信用算法做配置，对用户的信用信息做管理。

其他各层功能：

6. 支付服务层：为上述各端系统提供API。这些API也可以提供给业务系统直接使用。

7. 接口层：和各相关系统对接的接口，其中最重要的是和支付渠道对接的支付网关。

8. 引擎层： 包括统计分析、风控、反洗钱、信用评估等在后台运行的各个系统。

9. 存储层： 各种持久化的数据库支持。

这其实也是普通互联网应用系统架构，没有什么特别之处。比如微服务如何体现，如何满足性能需求等，在这个视图中无法体现出来。这只是个软件角度的高层视图，后续我们对各个主要模块进行分解，从分解视图中可以知道如何满足非功能性需求。