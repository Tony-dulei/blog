---
layout: post
title: "支持微服务开发的软件过程"
subtitle: "支付基础设施-1"
date: 2017-02-14 12:00:00
author: "shamphone"
header-img: "img/home-bg-post.jpg"
catalog: true
tags: [Fintech]

---

>  不少同学询问到如何实施微服务，特别是对项目数量增加的担忧。 在支付渠道设计一文中提到，可以按照渠道来划分项目，一个渠道一个项目，有同学认为这会导致项目太多无法管理。 本文要回答这个问题，在微服务中，我们是如何管理项目的，即微服务的软件过程。 

[支付系统基础设施建设](http://blog.lixf.cn/essay/2016/11/12/account-8-infra/)一文简单描述了持续集成的步骤。这里我们从软件过程的角度，详细介绍这些步骤。 支持持续集成所需要的基础软件，在该文中有介绍，请大家务必先阅读。 这里我们以基于jira的过程管理为例来讲述。 关于Jira软件本身介绍、相对Redmine的优势等问题，请大家自行查阅资料，不在本文介绍范围。 
在介绍这个过程之前，先强调一个观点：   
- 人管代码，代码管机器  
- 人管代码，代码管机器  
- 人管代码，代码管机器  


## 一、软件过程


Jira原是设计来进行Bug跟踪的系统，后来系统功能逐步完善后，被广泛适用于软件过程管理。Jira优势在于简单，好用。 这里就不介绍Jira的具体使用。 使用Jira进行软件项目管理，首先需要定义任务的处理流程。 以下是一个参考流程：  
[![overview](http://blog.lixf.cn/img/in-post/process-overall.png)](http://blog.lixf.cn/img/in-post/process-overall.png)

在这个流程中，需要区分两个概念：任务和子任务。 每个任务对应一个完整的业务需求，比如对账、对接工行借记卡、获取个人优惠券列表接口。这些业务需求每个都是可以独立测试的。子任务设置相对比较简单，每个子任务对应这在本次任务执行中需要修改的开发项目。 比如对接工行借记卡，会涉及到：  
1. 支付网关项目调整；   
2. 支付路由项目中增加路由选项；   
3. 工行借记卡通道对接。   
三个项目的修改，那会对应在这个任务下建立三个子任务。   

- 任务是用来追踪项目过程的，这是项目经理和产品经理关注的层次。   
- 子任务是用来支持开发自动化的，这是开发人员关注的层次。 

这样，针对任务和子任务，会设置不同的属性：

[![task](http://blog.lixf.cn/img/in-post/process-task.png)](http://blog.lixf.cn/img/in-post/process-task.png)


### 1.1 需求管理

Jira也是一个不错的需求管理工具。产品经理可以通过Jira来执行需求管理，相对开发来说，需求管理流程会比较简单，一般是开发需求、审核需求、关闭需求三个环节即可。 需要注意的地方是：  

1. 需求管理流程需要和开发流程分离，毕竟这是不同的团队做的事情。   
2. 开发任务可以和需求任务相关联。Jira通过复制任务来提供这个支持。 

一个需求任务可以对应多个开发任务，这在实际操作中是很常见的：   
1. 为了满足上线要求，一个需求任务会被拆分成多个开发任务，先完成核心功能开发并上线，再完成外围功能开发。这两次独立上线的工作，会被拆分为2个或者更多的开发任务；  
2. 如果对不同平台，比如Android，IOS，PCweb有不同的上线时间要求和技术需求，也需要将当前需求按照目标平台来拆分。   

### 1.2 创建任务

如上所述，开发任务的来源有两个：

- 需求任务，即对应产品经理提的需求  
- 优化任务，这一般是开发团队内部进行重构或者性能优化来提的开发任务。  

那任务的粒度如何把握？ 每个开发任务是一个完整的需求，是可以独立执行测试的。 

### 1.3 创建子任务

在接收到开发任务后，开发人员需要对系统实现进行设计和分解，确定需要新开发的内容以及需要改进的工作。 在微服务架构中，一次任务开发会涉及到多个系统的变更。这样就需要为每个系统建立一个独立的子任务，以后，我们将按照这个子任务的设置来驱动开发流程。 

### 1.4 启动主任务开发

主任务启动开发流程比较简单，主要是邮件通知到各相关人员，可以启动该任务。 

### 1.5 启动子任务开发
 
子任务的启动和执行，是整个流程的核心工作。 
[![启动子任务开发](http://blog.lixf.cn/img/in-post/process-3.png)](http://blog.lixf.cn/img/in-post/process-3.png)

使用git/gitlab来做版本控制，这个流程的要点在于：
1. 如果需要新建项目来开发，则由开发人员填写新项目的名称、类型（Web， RPC， 工具类等），在git上创建一个项目框架，包含必要的基础文件。
2. 邮件通知开发人员需要下载的项目代码库地址。
3. 开发人员签出代码到本地，执行开发工作。 
4. 开发人员随时可以签入代码到服务器上，发出Merge Request；
5. gitlab在接受签入前，执行静态代码检查；
6. 执行单元测试；
7. 通知相关人员进行代码审核；
8. 执行代码审核；
9. 审核通过， 代码被合并到主干版本。 
10. 通知子任务可以提测。 当然，是否提测，是由开发人员来决定。 

### 1.6 子任务和任务提测

子任务开发完成后，即可提测。所有子任务完成后，主任务可以提测。主任务提测后，测试人员介入开始执行测试任务。   
[![提测](http://blog.lixf.cn/img/in-post/process-test.png)](http://blog.lixf.cn/img/in-post/process-test.png)
测试通过后， 既可以准备上线。 

### 1.7 预部署和全部署

一般上线会分为两步，预部署和全部署。预部署的目的是先验证系统在线上环境运行是否正常，减少回滚成本。特别是在部署服务器特别多的情况下，先部署1-2台机器，可以在线上验证本次上线是否可以。 验证通过后，既可以执行全部署。 

## 二、项目文件结构

开发参考目录结构：
[![目录结构](http://blog.lixf.cn/img/in-post/process-dir.jpg)](http://blog.lixf.cn/img/in-post/process-dir.jpg)

从这个目录里面我们可以看到，和项目相关的部署用脚本，需要由项目开发人员自己来维护，用以保证部署工作能够自动执行。包括验证项目部署成功的脚本。 
验证项目是否部署成功，一种方式是在日志中打桩，grep到这个日志，即意味着系统成功启动；一种方式是调用接口来验证是否成功。 

部署目录参考：  
[![目录结构](http://blog.lixf.cn/img/in-post/process-deploy.jpg)](http://blog.lixf.cn/img/in-post/process-deploy.jpg)

