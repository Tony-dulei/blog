---
layout:     post
title:      "重构的准备工作"
subtitle:   "从SSH单体应用到微服务架构-2"
date:       2016-08-06 12:00:00
author:     "shamphone"
header-img: "img/home-bg-post.jpg"
catalog: true
tags:
    - 微服务

---

既然已经分析了系统的诸多问题，那下一步就开始动手了。可是不巧的是，公司这时候突然出一个新规定，要每个月都要发布一个新版本。每个部门都上报要塞到新版本的功能，大家都希望功能越多越有面子。
这一下子把工作压力就堆上来了，还整不整？
正在犹豫中，一件事情却把大伙推上技改不归路。支付系统的一个核心工作就是对接各个银行和收单机构。
原系统是在支付模块中实现对接。已经对接了数个第三方支付，正要对接银行的时候，问题来了。
有个大银行接口文档发过来，大家一看就炸了：客户端必须使用银行提供的加密系统来通讯，该加密系统只能在windows上跑！
而且，推荐版本是windows 2003 server！2003！2003！十年前的系统，运维同学表示不可能有。
后来在windows 2008 server上安装成功，可这只是第一步。我们系统虽然是java写的，但不能一半跑linux一半跑windows。
这一块功能必须得首先微服务化了。开弓没有回头箭，大家硬着头皮就得往前赶了。

## 第一步，确定目标
1.平滑改进，确保新旧服务无缝过度。也就是常说的，在飞行中换引擎。
2.支持多家银行，这些银行对系统环境有不同要求。操作系统，加密程序系统，各种怪异的参数，等等。
3.性能提升，满足秒杀场景需求。这就要求按照各业务需求来采用合适的存储介质，不能一个数据库解决所有问题。
4.提升安全性，将敏感数据，如帐号密码等，独立数据库存储，执行加密。
5.实现清结算。而清结算又引来新问题，即账户体系的建设，以及和财务系统对接的问题。

这是拿得出手的目标，程序员们还有自己的小算盘

6.降低系统上手时间。原来系统复杂得怕了，每个微服务要尽可能简单，内聚，新司机一来就可以上手，最好都不需要培训。
7.读写分离，提升性能和可靠性，不让系统在高访问量时被打垮。看不到钱包有多少钱是可以的，但是支付的时候一分钱都不能丢。

## 第二步，设计架构
确认微服务架构后，就开始设计系统软件架构，这是最终的目的架构，也就是重构的目标架构，为重构提供蓝图。我们设计的整体架构，以后的版本会细化描述。
【增加数据层的同步，异地同步】

## 第三步，确定改进方案
1.完善基础架构，制定研发规范。包括整体编码规范，各端架构规范，日志规范，接口设计规范等。
2.业务逻辑和数据存储逻辑分离。SSH架构为重构带来的架构上最好的帮助，就是内置地实现了业务逻辑和存储逻辑的分离。将原来进程内的数据访问逻辑迁移到进城外，也就是使用独立的系统来实现。这使得数据存储逻辑能够共用，减少重复开发量。
3.对业务服务接口，采用 新接口新架构，老接口老架构，动接口动架构，逐步调整，无缝上线。新开发的功能，原则上都在新架构中进行。如果需要对老接口进行升级，则评估升级工作量和时间要求，尽量迁移到新架构上来实现。
4. 先迁移后调整，优化数据存储逻辑。当存储逻辑和业务逻辑分离后，业务逻辑层开发重点在于如何组合存储逻辑来实现多变的业务需求，而存储逻辑层则相对稳定，重点放在如何提升性能，这里是性能的瓶颈。分离后，采用基于接口的调用，存储逻辑的实现变更不会影响到业务逻辑，也给开发人员调整的自由，可以根据需要变更合适存储。我们并不急着调整数据库结构。在保持原有表不变的前提下，用进程外调用取代原进程内调用，避免实现的大波动。迁移完成后，才进行存储结构的调整。

##第四步，团队分工协作
按照系统架构的设计，团队分工也容易确定下来。前期团队我们划分为三个大组，基础架构组，负责建设和完善基础设施。这个组一个人就够了，甚至可以兼任。基础服务组，负责开发数据存储服务。业务接口开发团队，负责对外接口开发工作。这是整体的分工，后续在各组内部根据开发内容进一步横向切分团队。
这里不推荐全栈工程师的方式。细化分工是提升协作能力的第一步。